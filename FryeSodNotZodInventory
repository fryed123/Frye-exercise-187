//AUTHOR: Darren Frye
//COURSE: CPT 187
//PURPOSE: Supportive class provides MainClass with file reading/writing, record-copying, and user searching.
//CREATEDATE: 4/16/2020

package edu.cpt187.frye.participation;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class Inventory 
{
	//ATTRIBUTES

	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "No Discount"};
	private final double[] DISCOUNT_RATES = {0.25, 0.15, 0.0};
	private final String[] PRIZE_NAMES = {"Candy Bar", "Stuffed Animal", "Gift Card"};

	private final int MAX_RECORDS = 5;
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;

	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames = new String[MAX_RECORDS];
	private double[] itemPrices = new double[MAX_RECORDS];
	private int[] orderQuantity = new int[MAX_RECORDS];
	private double[] orderTotal = new double[MAX_RECORDS];
	private int[] inStockCounts = new int[MAX_RECORDS];

	private int itemSearchIndex = 0;
	private int recordCount = 0;
	private Random prizeGenerator = new Random();

	//BEHAVIORS

	public Inventory()
	{		
	}

	//Setters

	public void setReduceStock(int borrowedHowMany) 
	{
		inStockCounts[itemSearchIndex] -= borrowedHowMany;
	}

	public void setLoadItems(String borrowedFileName)
	{
		recordCount = RESET_VALUE;

		try
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));

			while(infile.hasNext() == true && recordCount < MAX_RECORDS)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();

				recordCount++;
			}

			infile.close();

			setBubbleSort(); //prev didn't have
		}

		catch(IOException ex)
		{
			recordCount = NOT_FOUND;
		}
	}


	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		recordCount = RESET_VALUE;

		try
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));

			while(infile.hasNext() == true && recordCount < MAX_RECORDS && recordCount < borrowedSize)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantity[recordCount] = infile.nextInt();
				orderTotal[recordCount] = infile.nextDouble();

				recordCount++;
			}

			infile.close();

			setBubbleSort(); //prev didn't have
		}

		catch(IOException ex)
		{
			recordCount = NOT_FOUND;
		}
	}


	public void setSearchIndex(int borrowedID)
	{
		itemSearchIndex = getSearchResults(borrowedID);
	}

	public void setBubbleSort()
	{
		int localLast = 0;
		int localIndex = 0;
		boolean localSwap = false;
		final boolean LOCAL_FALSE = false;
		final boolean LOCAL_TRUE = true;
		final int LOCAL_ONE = 1;

		localLast = recordCount - LOCAL_ONE; 

		while(localLast > RESET_VALUE)
		{
			localIndex = RESET_VALUE;
			localSwap = LOCAL_FALSE;

			while(localIndex < localLast)
			{	
				if(itemIDs[localIndex] > itemIDs[localIndex + LOCAL_ONE])
				{
					setSwapArrayElements(localIndex);

					localSwap = LOCAL_TRUE;
				}

				localIndex++;	
			}

			if(localSwap == false)
			{
				localLast = RESET_VALUE;
			}
			else
			{
				localLast = localLast - LOCAL_ONE;
			}
		}	
	}

	public void setSwapArrayElements(int borrowedIndex)
	{
		int localInt = 0;
		String localString = "";
		double localDouble = 0.0;

		localInt = itemIDs[borrowedIndex];
		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + 1];
		itemIDs[borrowedIndex + 1] = localInt;

		localString = itemNames[borrowedIndex];
		itemNames[borrowedIndex] = itemNames[borrowedIndex + 1];
		itemNames[borrowedIndex + 1] = localString;

		localDouble = itemPrices[borrowedIndex];
		itemPrices[borrowedIndex] = itemPrices[borrowedIndex + 1];
		itemPrices[borrowedIndex + 1] = localDouble;

		localInt = inStockCounts[borrowedIndex];
		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex + 1];
		inStockCounts[borrowedIndex + 1] = localInt;

		localInt = orderQuantity[borrowedIndex];
		orderQuantity[borrowedIndex] = orderQuantity[borrowedIndex + 1];
		orderQuantity[borrowedIndex + 1] = localInt;

		localDouble = orderTotal[borrowedIndex];
		orderTotal[borrowedIndex] = orderTotal[borrowedIndex + 1];
		orderTotal[borrowedIndex + 1] = localDouble;
	}

	//Getters

	public int[] getInStockCounts()
	{
		return inStockCounts;
	}

	public int[] getItemIDs()
	{
		return itemIDs;
	}

	public String[] getItemNames()
	{
		return itemNames;
	}

	public double[] getItemPrices()
	{
		return itemPrices;
	}

	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}

	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}

	public int[] getOrderQuantities()
	{
		return orderQuantity;
	}

	public double[] getOrderTotals()
	{
		return orderTotal;
	}

	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}

	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}

	public int getMaxRecords()
	{
		return MAX_RECORDS;
	}

	public int getItemSearchIndex()
	{
		return itemSearchIndex;
	}

	public int getRecordCount()
	{
		return recordCount;
	}

	public int getSearchResults(int borrowedBorrowedID)
	{
		int localFirst = 0;
		int localLast = 0;
		int localMid = 0;
		boolean localFound = false;
		
		localLast = recordCount - 1;
		
		while(localFirst <= localLast && localFound == false)
		{	
			localMid = (localFirst + localLast)/2;
			
			if(itemIDs[localMid] == borrowedBorrowedID)
			{
				localFound = true;
			}
			else
			{
				if(itemIDs[localMid] < borrowedBorrowedID)
				{
					localFirst = localMid + 1;
				}
				else
				{
					localLast = localMid - 1;
				}
			}
		}
		
		if(localFound == false)
		{
			localMid = NOT_FOUND;
		}
		
		return localMid;
	}

}
